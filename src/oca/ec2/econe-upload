#!/usr/bin/env ruby

# == Synopsis
# econe-upload
# 
# Uploads an image for use with an OpenNebula Cloud. This image should
# be later register with econe-register using the returned IMAGE-ID
#
# == Usage
#
# econe-upload [OPTIONS] IMAGE-PATH
#
# -h, --help:
#    show help
#
# --access-key <id>, -K <id>:
#    The username of the user
#
# --secret-key <key>, -K <key>:
#    The password of the user
#
# --url <url>, -U <url>:
#    Set url as the web service url to use
#
# IMAGE-PATH: Path to the image to upload

# -------------------------------------------------------------------------- #
# Copyright 2002-2009, Distributed Systems Architecture Group, Universidad   #
# Complutense de Madrid (dsa-research.org)                                   #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end


$: << RUBY_LIB_LOCATION

require 'EC2QueryClient'
require 'getoptlong'
require 'rdoc/usage'
require 'pp'


opts = GetoptLong.new(
            ['--help',       '-h',GetoptLong::NO_ARGUMENT],
            ['--access-key', '-K',GetoptLong::REQUIRED_ARGUMENT],
            ['--secret-key', '-S',GetoptLong::REQUIRED_ARGUMENT],
            ['--url',        '-U',GetoptLong::REQUIRED_ARGUMENT]
        )

url     = nil
access  = nil
secret  = nil
auth    = nil

begin
    opts.each do |opt, arg|
        case opt
            when '--help'
                RDoc::usage
            when '--access-key'
                access = arg
            when '--secret-key'
                secret = arg
            when '--url'
                url = arg
        end
    end
rescue Exception => e
    exit -1
end 

image = ARGV.shift

if !image || !File.exists?(image)
    puts "#{$0}: missing IMAGE-PATH parameter or file not found"
    exit -1
end

auth = "#{access}:#{secret}" if secret && access

begin
    ec2_client = EC2QueryClient::Client.new(auth,url)
rescue Exception => e
    puts "#{$0}: #{e.message}"
    exit -1
end

rc = ec2_client.upload_image(image)

if OpenNebula::is_error?(rc)
    puts "#{$0}: #{rc.message}"
    exit -1
end

puts "Success: Image_id #{rc['imageId']}"

exit 0

