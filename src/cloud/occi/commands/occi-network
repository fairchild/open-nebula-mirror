#!/usr/bin/env ruby

# == Synopsis
# occi-network
# 
# Manages virtual networks
#
# == Usage
#
# occi-network <COMMAND> [OPTIONS] [ARGUMENTS]
#
# COMMANDS
#
# create <occi xml file>
#       creates a new virtual network described by the provided 
#       <occi xml file>
#
# list
#       lists available virtual networks
#
# show <network id>
#       retrieves the OCCI XML representation of the virtual network
#       identified by <network id>
#
# delete <network id>
#       deletes the virtual network idenfitied by <network id>
#
#
# OPTIONS
#
# -h, --help:
#    show help
#
# --username <id>, -U <id>:
#    The username of the user
#
# --password <key>, -P <key>:
#    The password of the user
#
# --url <url>, -U <url>:
#    Set url as the web service url to use
#
# --debug, -D
#    Enables verbosity
#

# -------------------------------------------------------------------------- #
# Copyright 2002-2009, Distributed Systems Architecture Group, Universidad   #
# Complutense de Madrid (dsa-research.org)                                   #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
    TEMPLATES_LOCATION=ONE_LOCATION+"/etc/occi_templates"
    CONF_LOCATION=ONE_LOCATION+"/etc"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/occi"

require 'ONEOCCIClient'
require 'getoptlong'
require 'rdoc/usage'
require 'pp'


opts = GetoptLong.new(
            ['--help',       '-h',GetoptLong::NO_ARGUMENT],
            ['--username',   '-U',GetoptLong::REQUIRED_ARGUMENT],
            ['--password',   '-P',GetoptLong::REQUIRED_ARGUMENT],
            ['--url',        '-R',GetoptLong::REQUIRED_ARGUMENT],
            ['--debug',      '-D',GetoptLong::NO_ARGUMENT]
        )

url      = nil
username = nil
password = nil
auth     = nil
debug    = false

begin
    opts.each do |opt, arg|
        case opt
            when '--help'
                RDoc::usage
            when '--username'
                username = arg
            when '--password'
                password = arg
            when '--url'
                url = arg
            when '--debug'
                debug = true
        end
    end
rescue Exception => e
    exit -1
end 


begin
    occi_client = ONEOCCIClient::Client.new(url,username,password,debug)
rescue Exception => e
    puts "#{$0}: #{e.message}"
    exit -1
end

if !ARGV[0]
    puts "#{$0}: [COMMAND] not present"
    puts "#{$0}: Execute #{$0} -h for help."
    exit -1
end


case ARGV[0].downcase
when 'create'
    network_xml = ARGV[1]

    if !network_xml || !File.exists?(network_xml)
        puts "#{$0} create: missing OCCI-XML parameter or file not found"
        exit -1
    end

    occi_client.post_network(network_xml)

when 'list'
    occi_client.get_networks

when 'show'
    network_id = ARGV[1]

    if !network_id 
        puts "#{$0} show: missing NETWORK-ID parameter or file not found"
        exit -1
    end
    
    occi_client.get_network(network_id)

when 'delete'
    network_id = ARGV[1]

    if !network_id 
        puts "#{$0} delete: missing NETWORK-ID parameter"
        exit -1
    end

    occi_client.delete_network(network_id)

else
    puts "Command #{ARGV[0]} not valid."
    exit -1
    
end
    
    


